// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rendering_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rendering_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rendering_5fjob_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rendering_5fjob_2eproto;
namespace agent {
namespace package {
namespace renderer {
class project_files;
struct project_filesDefaultTypeInternal;
extern project_filesDefaultTypeInternal _project_files_default_instance_;
class render_project;
struct render_projectDefaultTypeInternal;
extern render_projectDefaultTypeInternal _render_project_default_instance_;
class rendering_job;
struct rendering_jobDefaultTypeInternal;
extern rendering_jobDefaultTypeInternal _rendering_job_default_instance_;
}  // namespace renderer
}  // namespace package
}  // namespace agent
PROTOBUF_NAMESPACE_OPEN
template<> ::agent::package::renderer::project_files* Arena::CreateMaybeMessage<::agent::package::renderer::project_files>(Arena*);
template<> ::agent::package::renderer::render_project* Arena::CreateMaybeMessage<::agent::package::renderer::render_project>(Arena*);
template<> ::agent::package::renderer::rendering_job* Arena::CreateMaybeMessage<::agent::package::renderer::rendering_job>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agent {
namespace package {
namespace renderer {

// ===================================================================

class project_files final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.package.renderer.project_files) */ {
 public:
  inline project_files() : project_files(nullptr) {}
  ~project_files() override;
  explicit PROTOBUF_CONSTEXPR project_files(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  project_files(const project_files& from);
  project_files(project_files&& from) noexcept
    : project_files() {
    *this = ::std::move(from);
  }

  inline project_files& operator=(const project_files& from) {
    CopyFrom(from);
    return *this;
  }
  inline project_files& operator=(project_files&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const project_files& default_instance() {
    return *internal_default_instance();
  }
  static inline const project_files* internal_default_instance() {
    return reinterpret_cast<const project_files*>(
               &_project_files_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(project_files& a, project_files& b) {
    a.Swap(&b);
  }
  inline void Swap(project_files* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(project_files* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  project_files* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<project_files>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const project_files& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const project_files& from) {
    project_files::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(project_files* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent.package.renderer.project_files";
  }
  protected:
  explicit project_files(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePathFieldNumber = 1,
    kDownloadUrlFieldNumber = 2,
  };
  // string relative_path = 1;
  void clear_relative_path();
  const std::string& relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // string download_url = 2;
  void clear_download_url();
  const std::string& download_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_download_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_download_url();
  PROTOBUF_NODISCARD std::string* release_download_url();
  void set_allocated_download_url(std::string* download_url);
  private:
  const std::string& _internal_download_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_download_url(const std::string& value);
  std::string* _internal_mutable_download_url();
  public:

  // @@protoc_insertion_point(class_scope:agent.package.renderer.project_files)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// -------------------------------------------------------------------

class render_project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.package.renderer.render_project) */ {
 public:
  inline render_project() : render_project(nullptr) {}
  ~render_project() override;
  explicit PROTOBUF_CONSTEXPR render_project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  render_project(const render_project& from);
  render_project(render_project&& from) noexcept
    : render_project() {
    *this = ::std::move(from);
  }

  inline render_project& operator=(const render_project& from) {
    CopyFrom(from);
    return *this;
  }
  inline render_project& operator=(render_project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const render_project& default_instance() {
    return *internal_default_instance();
  }
  static inline const render_project* internal_default_instance() {
    return reinterpret_cast<const render_project*>(
               &_render_project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(render_project& a, render_project& b) {
    a.Swap(&b);
  }
  inline void Swap(render_project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(render_project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  render_project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<render_project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const render_project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const render_project& from) {
    render_project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(render_project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent.package.renderer.render_project";
  }
  protected:
  explicit render_project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kProjectIdFieldNumber = 1,
    kBlenderVersionFieldNumber = 6,
    kBlendFileFieldNumber = 5,
    kBeginFrameFieldNumber = 2,
    kEndFrameFieldNumber = 3,
  };
  // repeated .agent.package.renderer.project_files files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::agent::package::renderer::project_files* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agent::package::renderer::project_files >*
      mutable_files();
  private:
  const ::agent::package::renderer::project_files& _internal_files(int index) const;
  ::agent::package::renderer::project_files* _internal_add_files();
  public:
  const ::agent::package::renderer::project_files& files(int index) const;
  ::agent::package::renderer::project_files* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agent::package::renderer::project_files >&
      files() const;

  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string blender_version = 6;
  void clear_blender_version();
  const std::string& blender_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blender_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blender_version();
  PROTOBUF_NODISCARD std::string* release_blender_version();
  void set_allocated_blender_version(std::string* blender_version);
  private:
  const std::string& _internal_blender_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blender_version(const std::string& value);
  std::string* _internal_mutable_blender_version();
  public:

  // .agent.package.renderer.project_files blend_file = 5;
  bool has_blend_file() const;
  private:
  bool _internal_has_blend_file() const;
  public:
  void clear_blend_file();
  const ::agent::package::renderer::project_files& blend_file() const;
  PROTOBUF_NODISCARD ::agent::package::renderer::project_files* release_blend_file();
  ::agent::package::renderer::project_files* mutable_blend_file();
  void set_allocated_blend_file(::agent::package::renderer::project_files* blend_file);
  private:
  const ::agent::package::renderer::project_files& _internal_blend_file() const;
  ::agent::package::renderer::project_files* _internal_mutable_blend_file();
  public:
  void unsafe_arena_set_allocated_blend_file(
      ::agent::package::renderer::project_files* blend_file);
  ::agent::package::renderer::project_files* unsafe_arena_release_blend_file();

  // uint32 begin_frame = 2;
  void clear_begin_frame();
  uint32_t begin_frame() const;
  void set_begin_frame(uint32_t value);
  private:
  uint32_t _internal_begin_frame() const;
  void _internal_set_begin_frame(uint32_t value);
  public:

  // uint32 end_frame = 3;
  void clear_end_frame();
  uint32_t end_frame() const;
  void set_end_frame(uint32_t value);
  private:
  uint32_t _internal_end_frame() const;
  void _internal_set_end_frame(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agent.package.renderer.render_project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agent::package::renderer::project_files > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blender_version_;
    ::agent::package::renderer::project_files* blend_file_;
    uint32_t begin_frame_;
    uint32_t end_frame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// -------------------------------------------------------------------

class rendering_job final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.package.renderer.rendering_job) */ {
 public:
  inline rendering_job() : rendering_job(nullptr) {}
  ~rendering_job() override;
  explicit PROTOBUF_CONSTEXPR rendering_job(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rendering_job(const rendering_job& from);
  rendering_job(rendering_job&& from) noexcept
    : rendering_job() {
    *this = ::std::move(from);
  }

  inline rendering_job& operator=(const rendering_job& from) {
    CopyFrom(from);
    return *this;
  }
  inline rendering_job& operator=(rendering_job&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rendering_job& default_instance() {
    return *internal_default_instance();
  }
  static inline const rendering_job* internal_default_instance() {
    return reinterpret_cast<const rendering_job*>(
               &_rendering_job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(rendering_job& a, rendering_job& b) {
    a.Swap(&b);
  }
  inline void Swap(rendering_job* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rendering_job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rendering_job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rendering_job>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rendering_job& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const rendering_job& from) {
    rendering_job::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rendering_job* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent.package.renderer.rendering_job";
  }
  protected:
  explicit rendering_job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 1,
    kProjectFieldNumber = 3,
    kFrameFieldNumber = 2,
  };
  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // .agent.package.renderer.render_project project = 3;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::agent::package::renderer::render_project& project() const;
  PROTOBUF_NODISCARD ::agent::package::renderer::render_project* release_project();
  ::agent::package::renderer::render_project* mutable_project();
  void set_allocated_project(::agent::package::renderer::render_project* project);
  private:
  const ::agent::package::renderer::render_project& _internal_project() const;
  ::agent::package::renderer::render_project* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::agent::package::renderer::render_project* project);
  ::agent::package::renderer::render_project* unsafe_arena_release_project();

  // uint32 frame = 2;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agent.package.renderer.rendering_job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
    ::agent::package::renderer::render_project* project_;
    uint32_t frame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// project_files

// string relative_path = 1;
inline void project_files::clear_relative_path() {
  _impl_.relative_path_.ClearToEmpty();
}
inline const std::string& project_files::relative_path() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.project_files.relative_path)
  return _internal_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void project_files::set_relative_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relative_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.package.renderer.project_files.relative_path)
}
inline std::string* project_files::mutable_relative_path() {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.project_files.relative_path)
  return _s;
}
inline const std::string& project_files::_internal_relative_path() const {
  return _impl_.relative_path_.Get();
}
inline void project_files::_internal_set_relative_path(const std::string& value) {
  
  _impl_.relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* project_files::_internal_mutable_relative_path() {
  
  return _impl_.relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* project_files::release_relative_path() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.project_files.relative_path)
  return _impl_.relative_path_.Release();
}
inline void project_files::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    
  } else {
    
  }
  _impl_.relative_path_.SetAllocated(relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relative_path_.IsDefault()) {
    _impl_.relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.project_files.relative_path)
}

// string download_url = 2;
inline void project_files::clear_download_url() {
  _impl_.download_url_.ClearToEmpty();
}
inline const std::string& project_files::download_url() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.project_files.download_url)
  return _internal_download_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void project_files::set_download_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.download_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.package.renderer.project_files.download_url)
}
inline std::string* project_files::mutable_download_url() {
  std::string* _s = _internal_mutable_download_url();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.project_files.download_url)
  return _s;
}
inline const std::string& project_files::_internal_download_url() const {
  return _impl_.download_url_.Get();
}
inline void project_files::_internal_set_download_url(const std::string& value) {
  
  _impl_.download_url_.Set(value, GetArenaForAllocation());
}
inline std::string* project_files::_internal_mutable_download_url() {
  
  return _impl_.download_url_.Mutable(GetArenaForAllocation());
}
inline std::string* project_files::release_download_url() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.project_files.download_url)
  return _impl_.download_url_.Release();
}
inline void project_files::set_allocated_download_url(std::string* download_url) {
  if (download_url != nullptr) {
    
  } else {
    
  }
  _impl_.download_url_.SetAllocated(download_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.download_url_.IsDefault()) {
    _impl_.download_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.project_files.download_url)
}

// -------------------------------------------------------------------

// render_project

// string project_id = 1;
inline void render_project::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& render_project::project_id() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void render_project::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.package.renderer.render_project.project_id)
}
inline std::string* render_project::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.render_project.project_id)
  return _s;
}
inline const std::string& render_project::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void render_project::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* render_project::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* render_project::release_project_id() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.render_project.project_id)
  return _impl_.project_id_.Release();
}
inline void render_project::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.render_project.project_id)
}

// uint32 begin_frame = 2;
inline void render_project::clear_begin_frame() {
  _impl_.begin_frame_ = 0u;
}
inline uint32_t render_project::_internal_begin_frame() const {
  return _impl_.begin_frame_;
}
inline uint32_t render_project::begin_frame() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.begin_frame)
  return _internal_begin_frame();
}
inline void render_project::_internal_set_begin_frame(uint32_t value) {
  
  _impl_.begin_frame_ = value;
}
inline void render_project::set_begin_frame(uint32_t value) {
  _internal_set_begin_frame(value);
  // @@protoc_insertion_point(field_set:agent.package.renderer.render_project.begin_frame)
}

// uint32 end_frame = 3;
inline void render_project::clear_end_frame() {
  _impl_.end_frame_ = 0u;
}
inline uint32_t render_project::_internal_end_frame() const {
  return _impl_.end_frame_;
}
inline uint32_t render_project::end_frame() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.end_frame)
  return _internal_end_frame();
}
inline void render_project::_internal_set_end_frame(uint32_t value) {
  
  _impl_.end_frame_ = value;
}
inline void render_project::set_end_frame(uint32_t value) {
  _internal_set_end_frame(value);
  // @@protoc_insertion_point(field_set:agent.package.renderer.render_project.end_frame)
}

// repeated .agent.package.renderer.project_files files = 4;
inline int render_project::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int render_project::files_size() const {
  return _internal_files_size();
}
inline void render_project::clear_files() {
  _impl_.files_.Clear();
}
inline ::agent::package::renderer::project_files* render_project::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.render_project.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agent::package::renderer::project_files >*
render_project::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:agent.package.renderer.render_project.files)
  return &_impl_.files_;
}
inline const ::agent::package::renderer::project_files& render_project::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::agent::package::renderer::project_files& render_project::files(int index) const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.files)
  return _internal_files(index);
}
inline ::agent::package::renderer::project_files* render_project::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::agent::package::renderer::project_files* render_project::add_files() {
  ::agent::package::renderer::project_files* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:agent.package.renderer.render_project.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agent::package::renderer::project_files >&
render_project::files() const {
  // @@protoc_insertion_point(field_list:agent.package.renderer.render_project.files)
  return _impl_.files_;
}

// .agent.package.renderer.project_files blend_file = 5;
inline bool render_project::_internal_has_blend_file() const {
  return this != internal_default_instance() && _impl_.blend_file_ != nullptr;
}
inline bool render_project::has_blend_file() const {
  return _internal_has_blend_file();
}
inline void render_project::clear_blend_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.blend_file_ != nullptr) {
    delete _impl_.blend_file_;
  }
  _impl_.blend_file_ = nullptr;
}
inline const ::agent::package::renderer::project_files& render_project::_internal_blend_file() const {
  const ::agent::package::renderer::project_files* p = _impl_.blend_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent::package::renderer::project_files&>(
      ::agent::package::renderer::_project_files_default_instance_);
}
inline const ::agent::package::renderer::project_files& render_project::blend_file() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.blend_file)
  return _internal_blend_file();
}
inline void render_project::unsafe_arena_set_allocated_blend_file(
    ::agent::package::renderer::project_files* blend_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blend_file_);
  }
  _impl_.blend_file_ = blend_file;
  if (blend_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.package.renderer.render_project.blend_file)
}
inline ::agent::package::renderer::project_files* render_project::release_blend_file() {
  
  ::agent::package::renderer::project_files* temp = _impl_.blend_file_;
  _impl_.blend_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agent::package::renderer::project_files* render_project::unsafe_arena_release_blend_file() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.render_project.blend_file)
  
  ::agent::package::renderer::project_files* temp = _impl_.blend_file_;
  _impl_.blend_file_ = nullptr;
  return temp;
}
inline ::agent::package::renderer::project_files* render_project::_internal_mutable_blend_file() {
  
  if (_impl_.blend_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent::package::renderer::project_files>(GetArenaForAllocation());
    _impl_.blend_file_ = p;
  }
  return _impl_.blend_file_;
}
inline ::agent::package::renderer::project_files* render_project::mutable_blend_file() {
  ::agent::package::renderer::project_files* _msg = _internal_mutable_blend_file();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.render_project.blend_file)
  return _msg;
}
inline void render_project::set_allocated_blend_file(::agent::package::renderer::project_files* blend_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blend_file_;
  }
  if (blend_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blend_file);
    if (message_arena != submessage_arena) {
      blend_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blend_file_ = blend_file;
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.render_project.blend_file)
}

// string blender_version = 6;
inline void render_project::clear_blender_version() {
  _impl_.blender_version_.ClearToEmpty();
}
inline const std::string& render_project::blender_version() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.render_project.blender_version)
  return _internal_blender_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void render_project::set_blender_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blender_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.package.renderer.render_project.blender_version)
}
inline std::string* render_project::mutable_blender_version() {
  std::string* _s = _internal_mutable_blender_version();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.render_project.blender_version)
  return _s;
}
inline const std::string& render_project::_internal_blender_version() const {
  return _impl_.blender_version_.Get();
}
inline void render_project::_internal_set_blender_version(const std::string& value) {
  
  _impl_.blender_version_.Set(value, GetArenaForAllocation());
}
inline std::string* render_project::_internal_mutable_blender_version() {
  
  return _impl_.blender_version_.Mutable(GetArenaForAllocation());
}
inline std::string* render_project::release_blender_version() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.render_project.blender_version)
  return _impl_.blender_version_.Release();
}
inline void render_project::set_allocated_blender_version(std::string* blender_version) {
  if (blender_version != nullptr) {
    
  } else {
    
  }
  _impl_.blender_version_.SetAllocated(blender_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blender_version_.IsDefault()) {
    _impl_.blender_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.render_project.blender_version)
}

// -------------------------------------------------------------------

// rendering_job

// string job_id = 1;
inline void rendering_job::clear_job_id() {
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& rendering_job::job_id() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.rendering_job.job_id)
  return _internal_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rendering_job::set_job_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.job_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.package.renderer.rendering_job.job_id)
}
inline std::string* rendering_job::mutable_job_id() {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.rendering_job.job_id)
  return _s;
}
inline const std::string& rendering_job::_internal_job_id() const {
  return _impl_.job_id_.Get();
}
inline void rendering_job::_internal_set_job_id(const std::string& value) {
  
  _impl_.job_id_.Set(value, GetArenaForAllocation());
}
inline std::string* rendering_job::_internal_mutable_job_id() {
  
  return _impl_.job_id_.Mutable(GetArenaForAllocation());
}
inline std::string* rendering_job::release_job_id() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.rendering_job.job_id)
  return _impl_.job_id_.Release();
}
inline void rendering_job::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  _impl_.job_id_.SetAllocated(job_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.rendering_job.job_id)
}

// uint32 frame = 2;
inline void rendering_job::clear_frame() {
  _impl_.frame_ = 0u;
}
inline uint32_t rendering_job::_internal_frame() const {
  return _impl_.frame_;
}
inline uint32_t rendering_job::frame() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.rendering_job.frame)
  return _internal_frame();
}
inline void rendering_job::_internal_set_frame(uint32_t value) {
  
  _impl_.frame_ = value;
}
inline void rendering_job::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:agent.package.renderer.rendering_job.frame)
}

// .agent.package.renderer.render_project project = 3;
inline bool rendering_job::_internal_has_project() const {
  return this != internal_default_instance() && _impl_.project_ != nullptr;
}
inline bool rendering_job::has_project() const {
  return _internal_has_project();
}
inline void rendering_job::clear_project() {
  if (GetArenaForAllocation() == nullptr && _impl_.project_ != nullptr) {
    delete _impl_.project_;
  }
  _impl_.project_ = nullptr;
}
inline const ::agent::package::renderer::render_project& rendering_job::_internal_project() const {
  const ::agent::package::renderer::render_project* p = _impl_.project_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent::package::renderer::render_project&>(
      ::agent::package::renderer::_render_project_default_instance_);
}
inline const ::agent::package::renderer::render_project& rendering_job::project() const {
  // @@protoc_insertion_point(field_get:agent.package.renderer.rendering_job.project)
  return _internal_project();
}
inline void rendering_job::unsafe_arena_set_allocated_project(
    ::agent::package::renderer::render_project* project) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.project_);
  }
  _impl_.project_ = project;
  if (project) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.package.renderer.rendering_job.project)
}
inline ::agent::package::renderer::render_project* rendering_job::release_project() {
  
  ::agent::package::renderer::render_project* temp = _impl_.project_;
  _impl_.project_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agent::package::renderer::render_project* rendering_job::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_release:agent.package.renderer.rendering_job.project)
  
  ::agent::package::renderer::render_project* temp = _impl_.project_;
  _impl_.project_ = nullptr;
  return temp;
}
inline ::agent::package::renderer::render_project* rendering_job::_internal_mutable_project() {
  
  if (_impl_.project_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent::package::renderer::render_project>(GetArenaForAllocation());
    _impl_.project_ = p;
  }
  return _impl_.project_;
}
inline ::agent::package::renderer::render_project* rendering_job::mutable_project() {
  ::agent::package::renderer::render_project* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:agent.package.renderer.rendering_job.project)
  return _msg;
}
inline void rendering_job::set_allocated_project(::agent::package::renderer::render_project* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.project_;
  }
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.project_ = project;
  // @@protoc_insertion_point(field_set_allocated:agent.package.renderer.rendering_job.project)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace renderer
}  // namespace package
}  // namespace agent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto
